// This file is auto-generated by dtscommands.
// Do not edit this file manually.
import { Command, CommandRun } from 'dtscommands'
import { BotEmbed, ProfileEmbed, VouchEmbed, VouchNotification } from '../../../utils/Embeds.js'
import { Colors, EmbedBuilder, Message } from 'discord.js'
import { del60, del9, del5, del30 } from '../../../utils/fun.js'
import { UpdateProfile, GetProfile } from '../../../cache/profile.js'
import prisma from '../../../prisma.js'
import { OnApprove, DenyReasons, OnDeny, CreatedVouch } from '../../../utils/vouch.js'

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/Bot/help.ts

export class HelpCmd extends Command {
  constructor () {
    super({
      category: 'Bot',
      description: 'Get the list of commands',
      name: 'help',
      aliases: ['commands']
    })
  }

  async run ({ message, client, args }: CommandRun) {
    const embed = new BotEmbed()

    const commands = client.commands

    if (args[0] && commands.get(args[0].toLowerCase())) {
      const command = commands.get(args[0].toLowerCase()) as Command
      embed.setTitle(command.name + ' | Help')
      embed.setDescription(command.description)
      embed.addFields(
        {
          name: 'Usage',
          value:
            '`' +
            client.config.prefix +
            command.name +
            ' ' +
            command.usage +
            '`'
        },
        {
          name: 'Aliases',
          value: command.aliases?.join(', ') || 'None'
        }
      )
      embed.setColor(Colors.Orange)

      return message.channel
        .send({
          embeds: [embed]
        })
        .then(del60)
    }

    const categories: { [key: string]: Command[] } = {}

    commands.forEach(command => {
      if (command.category === 'Staff') return
      if (!categories[command.category]) {
        categories[command.category] = []
      }
      categories[command.category].push(command)
    })

    embed.setTitle('Commands')
    embed.setDescription(
      'Here is a list of all the commands you can use on the bot.'
    )
    embed.addFields(
      Object.keys(categories).map(category => {
        return {
          name: category,
          value: categories[category]
            .map(
              command =>
                `**${client.config.prefix}${command.name}** ${command.description}`
            )
            .join('\n')
        }
      })
    )
    embed.setColor(Colors.Orange)
    embed.setThumbnail(client.user?.displayAvatarURL() || '')

    await message.channel
      .send({
        embeds: [embed]
      })
      .then(del60)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/Bot/invite.ts

export class InviteCmd extends Command {
  constructor () {
    super({
      name: 'invite',
      description: 'Invite the bot to your server',
      category: 'Bot'
    })
  }

  async run ({ message }: CommandRun) {
    const embed = new BotEmbed({
      title: 'Invite Me | ' + message.client.user.username,
      description: `[Shinex](https://discord.com/api/oauth2/authorize?client_id=${message.client.user.id}&permissions=412317149184&scope=bot%20applications.commands)\n[Shinex Support](https://discord.gg/tnt2NYgUBB)`,
      color: Colors.Orange
    })

    message.channel.send({
      embeds: [embed]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/Bot/ping.ts

export class PingCmd extends Command {
  constructor () {
    super({
      name: 'ping',
      category: 'Bot',
      description: 'Pong!'
    })
  }

  async run ({ message, client }: CommandRun) {
    const msg = await message.reply({
      content: 'Pinging...'
    })

    const ping = msg.createdTimestamp - message.createdTimestamp
    const apiPing = Math.round(client.ws.ping)

    msg.edit({
      embeds: [
        new EmbedBuilder()
          .setColor('DarkButNotBlack')
          .setTitle('Pong!')
          .setDescription(
            `> Latency: \`${ping}\`ms\n> API Latency: \`${apiPing}\`ms`
          )
          .setTimestamp()
      ],
      content: ''
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/profile/banner.ts

export class SetBannerCmd extends Command {
  constructor () {
    super({
      category: 'Profile',

      description: 'Set your banner',

      name: 'banner',
      args: true,
      usage: '<banner link>'
    })
  }

  async run ({ message, args }: CommandRun) {
    const banner = args.join(' ')
    const profile = await UpdateProfile(message.author.id, {
      banner
    })

    const embed = ProfileEmbed(profile, message.author)

    await message.channel
      .send({
        content: 'Your banner has been set',
        embeds: [embed]
      })
      .then(del9)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/profile/forum.ts

export class SetForumCmd extends Command {
  constructor () {
    super({
      name: 'forum',
      category: 'Profile',
      description: 'Set your forum profile',
      args: true,
      usage: 'forum'
    })
  }

  async run ({ message, args }: CommandRun) {
    const forum = args.join(' ')
    const profile = await UpdateProfile(message.author.id, {
      forum
    })

    const embed = ProfileEmbed(profile, message.author)

    await message.channel
      .send({
        content: 'Your forum has been set',
        embeds: [embed]
      })
      .then(del9)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/profile/products.ts

export class SetProductsCmd extends Command {
  constructor () {
    super({
      name: 'products',
      description: 'Set your products',
      category: 'Profile',
      args: true,
      usage: '<products>'
    })
  }

  async run ({ message, args }: CommandRun) {
    const products = args.join(' ')
    const profile = await UpdateProfile(message.author.id, {
      products
    })

    const embed = ProfileEmbed(profile, message.author)
    await message.channel
      .send({
        content: 'Your shop has been set',
        embeds: [embed]
      })
      .then(del9)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/profile/profile.ts

export class ProfileCmd extends Command {
  constructor () {
    super({
      name: 'profile',
      description: 'Shows your profile',
      category: 'Profile',
      aliases: ['p'],
      usage: '[user]'
    })
  }

  async run ({ message, args, client }: CommandRun) {
    let user = message.mentions.users?.first() || message.author

    if (args[0] && !message.mentions.users?.first()) {
      user = await client.users.fetch(args[0])
    }
    if (!user) {
      return message.reply('unknown user')
    }

    if (user.bot) return

    const messageToReply = await message.channel.send({
      embeds: [
        new EmbedBuilder({
          title: `${user.username}'s Profile`,
          color: Colors.Orange,
          description: 'Loading...',
          footer: {
            text: 'Shinex | Vouching System. discord.gg/tnt2NYgUBB'
          }
        })
      ]
    })

    const profile = await GetProfile(user.id, user.username)

    try {
      const embed = ProfileEmbed(profile, user)

      await messageToReply
        .edit({
          embeds: [embed]
        })
        .then(msg => {
          setTimeout(() => {
            msg.delete()
          }, 25000)
        })
    } catch (error) {
      console.log(error)
    }
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/profile/shop.ts

export class SetShopCmd extends Command {
  constructor () {
    super({
      name: 'shop',
      description: 'Set your shop',
      category: 'Profile'
    })
  }

  async run ({ message, args }: CommandRun) {
    const shop = args.join(' ')

    const profile = await UpdateProfile(message.author.id, {
      shop
    })

    const embed = ProfileEmbed(profile, message.author)

    await message.channel
      .send({
        content: 'Your shop has been set',
        embeds: [embed]
      })
      .then(del9)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/staff/dwc.ts

export class DwcCommand extends Command {
  constructor () {
    super({
      name: 'dwc',
      description: 'Mark DWC a user',
      category: 'Staff',
      args: true,
      usage: '<user>',
      manager: true
    })
  }

  async run ({ message, args }: CommandRun) {
    const user =
      message.mentions.users.first() ||
      message.guild?.members.cache.get(args[0])?.user
    if (!user) return message.reply('You must mention a user to DWC.')
    const reason = args.slice(1).join(' ')
    if (!reason) {
      return message.reply('You must provide a reason to DWC the user.')
    }
    const embed = new BotEmbed()
    embed.setTitle('Staff Tools')
    embed.setDescription(
      `user: \`${user.username}\` is marked as \`DWC\` for \`${reason}\``
    )
    embed.setColor(Colors.Red)
    embed.setFooter({
      text: 'DWC by ' + message.author.username + ' | Shinex'
    })

    await UpdateProfile(user.id, {
      profileStatus: 'WARN',
      warningBy: message.author.id,
      warningByUser: message.author.username,
      waringReason: '⚠ DEAL WITH CAUTION ⚠',
      warningAt: new Date()
    })

    await message.channel.send({
      embeds: [embed]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/staff/mark.ts

export class MarkCmd extends Command {
  constructor () {
    super({
      name: 'mark',
      description: 'Mark a user',
      category: 'Staff',
      args: true,
      usage: '<user> <reason>',
      manager: true
    })
  }

  async run ({ message, args }: CommandRun) {
    const user =
      message.mentions.users.first() ||
      message.guild?.members.cache.get(args[0])?.user
    if (!user) return message.reply('You must mention a user to mark.')
    const reason = args.slice(1).join(' ')
    if (!reason) {
      return message.reply('You must provide a reason to mark the user.')
    }
    const embed = new BotEmbed()
    embed.setTitle('Staff Tools')
    embed.setDescription(
      `user: \`${user.username}\` is marked as \`SCAMMER\` for \`${reason}\``
    )
    embed.setColor(Colors.Red)
    embed.setFooter({
      text: 'Marked by ' + message.author.username + ' | Shinex'
    })

    await UpdateProfile(user.id, {
      profileStatus: 'SCAMMER',
      markedBy: message.author.id,
      markedByUser: message.author.username,
      markedFor: reason,
      markedAt: new Date()
    })

    await message.channel.send({
      embeds: [embed]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/staff/unmark.ts

export class UnMarkCmd extends Command {
  constructor () {
    super({
      name: 'unmark',
      description: 'Unmark a user',
      category: 'Staff',
      args: true,
      usage: '<user>',
      manager: true
    })
  }

  async run ({ message, args }: CommandRun) {
    const user =
      message.mentions.users.first() ||
      message.guild?.members.cache.get(args[0])?.user
    if (!user) return message.reply('You must mention a user to unmark.')

    const embed = new BotEmbed()
    embed.setTitle('Staff Tools')
    embed.setDescription(
      `user: \`${user.username}\` is unmarked as \`SCAMMER\``
    )
    embed.setColor(Colors.Red)
    embed.setFooter({
      text: 'Unmarked by ' + message.author.username + ' | Shinex'
    })

    await UpdateProfile(user.id, {
      profileStatus: 'GOOD',
      markedBy: null,
      markedByUser: null,
      markedFor: null,
      markedAt: null
    })

    await message.channel.send({
      embeds: [embed]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/approve.ts

export class ApproveVouchCmd extends Command {
  constructor () {
    super({
      name: 'approve',
      description: 'Approve a vouch',
      category: 'Vouch',
      aliases: ['a', 'accept'],
      manager: true,
      args: true,
      usage: '<vouchId>'
    })
  }

  async run ({ message, args }: CommandRun) {
    const vouch = await prisma.vouch.findFirst({
      where: {
        id: parseInt(args[0])
      }
    })

    if (!vouch) {
      return message.channel.send('Vouch not found').then(del5)
    } else if (vouch.vouchStatus === 'APPROVED') {
      return message.channel.send('Vouch already approved').then(del5)
    }

    await OnApprove(vouch, message.author)

    await message.channel.send({
      embeds: [
        new BotEmbed({
          title: 'Vouch Approved',
          description: `Vouch with id \`${vouch.id}\` has been approved`,
          color: Colors.Green
        })
      ]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/deny.ts

export class DenyVouchCmd extends Command {
  constructor () {
    super({
      name: 'deny',
      description: 'Deny a vouch',
      category: 'Vouch',
      aliases: ['d'],
      manager: true,
      args: true,
      usage: '<vouchId> <reason>'
    })
  }

  async run ({ message, args }: CommandRun) {
    const vouch = await prisma.vouch.findFirst({
      where: {
        id: parseInt(args[0])
      }
    })

    if (!vouch) {
      return message.channel.send('Vouch not found').then(del5)
    } else if (vouch.vouchStatus === 'DENIED') {
      return message.channel.send('Vouch already denied').then(del5)
    }

    const reason =
      DenyReasons[args[1].toUpperCase() as keyof typeof DenyReasons] ||
      args.slice(1).join(' ')

    await OnDeny(vouch, message.author, reason)

    await message.channel.send({
      embeds: [
        new BotEmbed({
          title: 'Vouch Denied',
          description: `Vouch with id \`${vouch.id}\` has been denied by ${message.author} with reason \`${reason}\``,
          color: Colors.Red
        })
      ]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/denyReason.ts

export class DenyReasonCmd extends Command {
  constructor () {
    super({
      name: 'denyreason',
      description: 'See the deny reasons for a vouch',
      category: 'Staff',
      manager: true
    })
  }

  async run ({ message }: CommandRun) {
    const embed = new BotEmbed()
    embed.setTitle('Vouch Deny Reason help')

    embed
      .addFields(
        {
          name: 'Usage',
          value: '`!deny <vouchId> <reason>`'
        },
        {
          name: 'Shortcuts',
          value: Object.keys(DenyReasons)
            .map(key => `\`${key}\``)
            .join(', ')
        },
        {
          name: 'Custom Reasons',
          value:
            'You can also use custom reasons by typing the reason after the vouch id.'
        }
      )
      .setColor(Colors.Orange)

    await message.channel.send({
      embeds: [embed]
    })
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/status.ts

export class StatusCommand extends Command {
  constructor () {
    super({
      name: 'status',
      description: 'Shows the status of a vouch',
      category: 'Vouch',
      aliases: ['get'],
      args: true,
      usage: '<vouchId>'
    })
  }

  async run ({ message, args }: CommandRun) {
    const vouch = await prisma.vouch.findFirst({
      where: {
        id: parseInt(args[0])
      }
    })

    if (!vouch) {
      return message.channel.send('Unknown vouch').then(del5)
    }

    const embed = VouchEmbed(vouch)

    await message
      .reply({
        embeds: [embed]
      })
      .then(del30)
  }
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/vouch.ts

export class VouchCmd extends Command {
  constructor () {
    super({
      name: 'vouch',
      category: 'Vouch',
      description: 'Vouch a user',
      aliases: ['rep'],
      args: true,
      usage: '<user> <comment>'
    })
  }

  async run ({ message, client, args }: CommandRun) {
    if (!message.guild) {
      return message.reply('This command can only be used in a server')
    }

    const user =
      message.mentions.users?.first() || client.users.cache.get(args[0])

    const comment = args.slice(1).join(' ')
    if (!user || !comment) {
      return message.reply('Use Correctly `vouch <user> <comment>`').then(aDel)
    }

    if (user.id === message.author.id) {
      return message.reply('You cannot vouch yourself').then(aDel)
    }

    await message
      .reply({
        embeds: [
          new EmbedBuilder({
            title: 'Vouch Successful',
            description: `You have vouched <@${user.id}> with the comment \`${comment}\``,
            color: Colors.Orange
          })
        ]
      })
      .then(msg => {
        setTimeout(() => {
          msg.delete()
        }, 9000)
      })

    const vouch = await prisma.vouch.create({
      data: {
        comment,
        receiverId: user.id,
        receiverName: user.username,
        voucherId: message.author.id,
        voucherName: message.author.username,
        serverId: message.guild?.id,
        serverName: message.guild?.name,
        user: {
          connectOrCreate: {
            create: {
              userId: user.id,
              username: user.username
            },
            where: {
              userId: user.id
            }
          }
        }
      }
    })

    await user.send({
      embeds: [
        new VouchNotification({
          description: `You have received a vouch \`${vouch.id}\` by \`${vouch.voucherName}\`.`
        })
      ]
    })
    CreatedVouch(vouch)
  }
}

function aDel (msg: Message) {
  setTimeout(() => {
    msg.delete()
  }, 5000)
}

// Content From D:\Devloper project\DISCORD TS\shinex\src\main\commands/vouch/vouchHelp.ts

export class VouchHelp extends Command {
  constructor () {
    super({
      name: 'vouchhelp',
      description: 'Help users with vouching',
      category: 'Vouch',
      aliases: ['vouchh', 'vh'],
      args: true,
      usage: '<comment>'
    })
  }

  async run ({ message, args, client }: CommandRun) {
    const user = message.author

    const comment = args.join(' ')

    if (!comment) {
      return message.reply('Use Correctly `vh <user> <comment>`')
    }

    const embed = new BotEmbed({
      title: `Please vouch ${user.username}`,
      description: `Please vouch \`${user.username}\` with the comment \`${comment}\``,
      color: Colors.Orange,
      fields: [
        {
          name: 'Command',
          value: client.config.prefix + `vouch ${user.id} ${comment}`
        }
      ]
    })

    return message.channel.send({
      embeds: [embed]
    })
  }
}
